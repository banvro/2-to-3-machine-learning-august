# # import re

# # text = """In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name.

# # The built-in exceptions listed below can be generated by the interpreter or built-in functions. Except where mentioned, they have an “associated value” indicating the detailed cause of the error. This may be a string or a tuple of several items of information (e.g., an error code and a string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor.

# # User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.

# # The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException. More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions.

# # Exception context"""




# # ptrn = "the"


# # match = re.findall(ptrn, text)

# # print(match)


# import re


# txt = """
# In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an 98677152890 except clause that mentions a particular class, that clause also handles any 6789045627 exception classes derived from that class (but not exception classes from which it is derived). Two exception classes 9273249374 that are not related via subclassing are never equivalent, even if they have the same name.

# The built-in exceptions listed below can be generated by the interpreter or built-in functions. Except where mentioned, they have an “associated value” 3182967534indicating the detailed cause of the error. This may be a string or a tuple of several items of information (e.g., an error code and 4539871522 a string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor.

# User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.

# The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, 8945267895 and not from BaseException. More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions.

# Exception context"""


# ptrn = "\d\d\d\d\d\d\d\d\d\d"


# xyz = re.findall(ptrn, txt)
# # xyz = re.finditer(ptrn, txt)

# # number finding strat form 9 and 8 
# # [98]\d{9} 

# print(xyz)

# # for i in xyz:
# #     print(i.span())





import re



text = """In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an 98677152890 except clause that mentions a particular class, that clause also handles any 6789045627 exception classes derived from that class (but not exception classes from which it is derived). Two exception classes 9273249374 that are not related via subclassing are never equivalent, even if they have the same name.



The built-in exceptions listed below can be generated by the interpreter or built-in functions. Except where mentioned, they xyz-abx@gmail.com have an “associated value” 3182967534indicating the ajsbdj123@gmail.com detailed cause of the error. This may be a string or a tuple of several items of information (e.g., an error code and 4539871522 a hello123@gmail.in string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor.

User code can raise kajsbdk123@outlook.com ajsd@gmail.com built-in exceptions. This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.

The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, 8945267895 and not from BaseException. More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions.

Exception context"""


ptrn = "[a-zA-Z][a-z]+\d*[@][a-z]+[.][a-z]{2,3}"


mathc = re.findall(ptrn, text)

print(mathc)
